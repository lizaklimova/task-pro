{"version":3,"file":"static/js/492.d7d91a82.chunk.js","mappings":"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","sources":["components/App/App.styled.jsx","components/Schedule/ScheduleItem/ScheduleItem.styled.jsx","components/Schedule/TaskItem/TaskItem.styled.jsx","components/Schedule/TaskItem/TaskItem.jsx","components/Schedule/ScheduleItem/ScheduleItem.jsx","components/Schedule/ScheduleList/ScheduleList.styled.jsx","components/Schedule/ScheduleList/ScheduleList.jsx","components/Schedule/ScheduleHeader/ScheduleHeader.styled.jsx","components/Schedule/ScheduleHeader/ScheduleHeader.jsx","pages/SchedulePage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const MainContainer = styled.div`\n  height: calc(100vh - 60px);\n  width: 100vw;\n  padding: 14px 10px 24px 10px;\n  background: ${({ $bg }) =>\n    $bg\n      ? `center / cover no-repeat\n    url(${$bg.backgroundMobileURL})`\n      : 'unset'};\n\n  @media screen and (min-width: 375px) {\n    padding: 14px 20px 24px 20px;\n  }\n\n  @media screen and (-webkit-min-device-pixel-ratio: 2) {\n    background: ${({ $bg }) =>\n      $bg\n        ? `center / cover no-repeat\n    url(${$bg.backgroundMobile2xURL})`\n        : 'unset'};\n  }\n\n  @media screen and (min-width: 768px) {\n    padding: 26px 32px 52px 32px;\n    height: calc(100vh - 68px);\n    background: ${({ $bg }) =>\n      $bg\n        ? `center / cover no-repeat\n    url(${$bg.backgroundTabletURL})`\n        : 'unset'};\n  }\n\n  @media screen and (min-width: 768px) and (-webkit-min-device-pixel-ratio: 2) {\n    background: ${({ $bg }) =>\n      $bg\n        ? `center / cover no-repeat\n    url(${$bg.backgroundTablet2xURL})`\n        : 'unset'};\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc(100vw - 260px);\n    padding: 10px 24px 36px 24px;\n    background: ${({ $bg }) =>\n      $bg\n        ? `center / cover no-repeat\n    url(${$bg.backgroundDesktopURL})`\n        : 'unset'};\n  }\n\n  @media screen and (min-width: 1440px) and (-webkit-min-device-pixel-ratio: 2) {\n    background: ${({ $bg }) =>\n      $bg\n        ? `center / cover no-repeat\n    url(${$bg.backgroundDesktop2xURL})`\n        : 'unset'};\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Card = styled.div`\n  width: 100%;\n  border-radius: 10px;\n  padding: 24px 14px;\n  background-color: var(--card-bg);\n  border-left: 7px solid var(--accent-color);\n\n  & p {\n    margin-bottom: 12px;\n  }\n\n  & ul {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 12px;\n    min-width: 100%;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const BoardLink = styled(Link)`\n  padding: 4px 20px;\n  border-radius: 8px;\n  background-color: ${({ $label }) => `var(--priority-${$label})`};\n  opacity: 0.8;\n  transition: all var(--easedTransition);\n\n  &:hover {\n    opacity: 1;\n    font-weight: bold;\n  }\n`;\n","import { determineLabelColor } from 'helpers';\nimport { BoardLink } from './TaskItem.styled';\n\nconst TaskItem = ({ task }) => {\n  return (\n    <BoardLink\n      to={`/home/board/${task.board}`}\n      $label={determineLabelColor(task.priority)}\n    >\n      {task.title}\n    </BoardLink>\n  );\n};\n\nexport default TaskItem;\n","import { useTranslation } from 'react-i18next';\nimport { Card } from './ScheduleItem.styled';\nimport { useSelector } from 'react-redux';\nimport { selectAllCards } from '../../../redux/board/boardSelectors';\nimport { compareDates } from 'helpers';\nimport { nanoid } from '@reduxjs/toolkit';\nimport TaskItem from '../TaskItem';\n\nconst ScheduleItem = ({ date }) => {\n  const { t } = useTranslation();\n  const allCards = useSelector(selectAllCards);\n\n  const daysOfTheWeek = [\n    t('schedule.sunday'),\n    t('schedule.monday'),\n    t('schedule.tuesday'),\n    t('schedule.wednesday'),\n    t('schedule.thursday'),\n    t('schedule.friday'),\n    t('schedule.saturday'),\n  ];\n  return (\n    <Card>\n      <p>\n        {date.toLocaleDateString()} {daysOfTheWeek[date.getDay()]}\n      </p>\n      <ul>\n        {allCards\n          .filter(({ deadline }) => compareDates(deadline, date))\n          .map(task => (\n            <li key={nanoid()}>\n              <TaskItem task={task} />\n            </li>\n          ))}\n        {allCards.filter(({ deadline }) => compareDates(deadline, date))\n          .length === 0 && (\n          <li key={nanoid()} style={{ opacity: '0.5' }}>\n            {t('schedule.noTasks')}\n          </li>\n        )}\n      </ul>\n    </Card>\n  );\n};\n\nexport default ScheduleItem;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  height: 90%;\n  padding-right: 8px;\n  overflow-y: scroll;\n`;\n","import { nanoid } from '@reduxjs/toolkit';\nimport { getDaysInMonth } from 'helpers';\nimport ScheduleItem from '../ScheduleItem';\nimport { List } from './ScheduleList.styled';\n\nconst ScheduleList = ({ currentMonth }) => {\n  const currentDate = new Date();\n  let datesOfMonth;\n  if (currentMonth) {\n    datesOfMonth = getDaysInMonth(\n      currentDate.getFullYear(),\n      currentDate.getMonth()\n    );\n  } else {\n    const firstDayOfNextMonth = new Date(\n      currentDate.getFullYear(),\n      currentDate.getMonth() + 1,\n      1\n    );\n    datesOfMonth = getDaysInMonth(\n      firstDayOfNextMonth.getFullYear(),\n      firstDayOfNextMonth.getMonth()\n    );\n  }\n\n  return (\n    <List>\n      {datesOfMonth.map(date => (\n        <li key={nanoid()}>\n          <ScheduleItem date={date} />\n        </li>\n      ))}\n    </List>\n  );\n};\n\nexport default ScheduleList;\n","import styled from 'styled-components';\n\nexport const HeaderWrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n\n  & h2 {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 4px 12px;\n  border: none;\n  border-radius: 8px;\n  background-color: var(--accent-color);\n  color: var(--btn-icon-bg);\n  font-weight: 500;\n  transition: all var(--easedTransition);\n\n  &:hover {\n    background-color: var(--accent-btn-hover);\n  }\n`;\n","import { useTranslation } from 'react-i18next';\nimport { Button, HeaderWrap } from './ScheduleHeader.styled';\n\nconst ScheduleHeader = ({ toggleCurrentMonth, currentMonth }) => {\n  const { t } = useTranslation();\n\n  return (\n    <HeaderWrap>\n      <h2>{t('schedule.header')}</h2>\n      <Button type=\"button\" onClick={toggleCurrentMonth}>\n        {currentMonth ? t('schedule.next') : t('schedule.current')}\n      </Button>\n    </HeaderWrap>\n  );\n};\n\nexport default ScheduleHeader;\n","import { MainContainer } from 'components/App/App.styled';\nimport ScheduleList from 'components/Schedule/ScheduleList/ScheduleList';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllCards } from '../redux/cards/cardsOperations';\nimport ScheduleHeader from 'components/Schedule/ScheduleHeader';\n\nconst SchedulePage = () => {\n  const dispatch = useDispatch();\n  const [currentMonth, setCurrentMonth] = useState(true);\n\n  const toggleCurrentMonth = () => {\n    setCurrentMonth(prevState => !prevState);\n  };\n\n  useEffect(() => {\n    dispatch(getAllCards());\n  }, [dispatch]);\n\n  return (\n    <MainContainer>\n      <ScheduleHeader\n        toggleCurrentMonth={toggleCurrentMonth}\n        currentMonth={currentMonth}\n      />\n      <ScheduleList currentMonth={currentMonth} />\n    </MainContainer>\n  );\n};\n\nexport default SchedulePage;\n"],"names":["MainContainer","styled","_templateObject","_taggedTemplateLiteral","_ref","$bg","concat","backgroundMobileURL","_ref2","backgroundMobile2xURL","_ref3","backgroundTabletURL","_ref4","backgroundTablet2xURL","_ref5","backgroundDesktopURL","_ref6","backgroundDesktop2xURL","Card","BoardLink","Link","$label","task","_jsx","to","board","determineLabelColor","priority","children","title","date","t","useTranslation","allCards","useSelector","selectAllCards","daysOfTheWeek","_jsxs","toLocaleDateString","getDay","filter","deadline","compareDates","map","TaskItem","nanoid","length","style","opacity","List","datesOfMonth","currentMonth","currentDate","Date","getDaysInMonth","getFullYear","getMonth","firstDayOfNextMonth","ScheduleItem","HeaderWrap","Button","_templateObject2","toggleCurrentMonth","type","onClick","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setCurrentMonth","useEffect","getAllCards","ScheduleHeader","prevState","ScheduleList"],"sourceRoot":""}